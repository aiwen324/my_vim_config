global !p
texMathZones = ['texMathZone'+x for x in ['A', 'AS', 'B', 'BS', 'C', 'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS', 'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z']]
texIgnoreMathZones = ['texMathText']
texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")
ignore = texIgnoreMathZoneIds[0]
def math():
    synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
    print(synstackids)
    try:
        first = next(i for i in reversed(synstackids) if i in texIgnoreMathZoneIds or i in texMathZoneIds)
        return first != ignore
    except StopIteration:
        return False


# This is a dummy function for testing
def math2():
    synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
    try:
        first = next(i for i in reversed(synstackids) if i in texIgnoreMathZoneIds or i in texMathZoneIds)
        return synstackids
    except StopIteration:
        return synstackids
endglobal


snippet mk "Inline Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
if t[1] and t[2]:
    t[1] = t[1].strip()
`$2
endsnippet

snippet dm "Display Math" wmA

$$
 ${1}
$$
$0
endsnippet


snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet '([A-Za-z])sub' "subscript3" wrA
`!p snip.rv = match.group(1)`_{$1}$0
endsnippet

context "math()"
snippet infinity "Infinity" wA
\infty$0
endsnippet

context "math()"
snippet '(\\)?alpha' "alpha" wrA
\alpha
endsnippet

context "math()"
snippet '(\\)?beta' "beta" wrA
\beta
endsnippet

context "math()"
snippet '(\\)?theta' "theta" wrA
\theta
endsnippet

context "math()"
snippet '(\\)?pi' "pi" wrA
\pi
endsnippet

context "math()"
snippet -> "rightarrow" wA
\rightarrow 
endsnippet

context "math()"
snippet <- "leftarrow" wA
\leftarrow
endsnippet

context "math()"
snippet hat "Hat" wA
\hat{$1}$0
endsnippet

snippet sr "^2" iA
^2
endsnippet

snippet cb "^3" iA
^3
endsnippet

snippet td "superscript" iA
^{$1}$0
endsnippet

priority 10
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet


snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

context "math()"
snippet dint "integral" wA
\int_{${1:-\infty}}^{${2:\infty}} ${3:${VISUAL}} $0
endsnippet

context "math()"
snippet vint "integral" wA
\int_{${1}} ${2:${VISUAL}} $0
endsnippet


context "math()"
snippet iint "integral" wA
\int ${1:${VISUAL}} $0
endsnippet

context "math()"
snippet lim "Limit" w
\lim_{${1:n\rightarrow \infty}} ${2:${VISUAL}} $0
endsnippet

context "math()"
snippet limsup "limsup" wA
\limsup_{${1:n} \to ${2:\infty}} 
endsnippet

context "math()"
snippet liminf "liminf" wA
\liminf_{${1:n} \to ${2:\infty}} 
endsnippet

context "math()"
snippet distas "Distributed as" wA
\overset{$1}{\sim}$0
endsnippet

priority 300
snippet test-script "Test Script" wA
`!p snip.rv = math2() ` $1
endsnippet
